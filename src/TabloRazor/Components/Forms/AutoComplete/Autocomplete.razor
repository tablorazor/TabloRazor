@typeparam TItem
@inherits TablerBaseComponent
@namespace TabloRazor

<div class="dropdown autocomplete-input @ValidationClasses" style="width: 100%;">
    <input @ref="_searchInput"
           disabled="@Disabled"
           @attributes="@UnmatchedParameters"
           @bind="@SearchText"
           @bind:event="oninput"
           @onkeyup="HandleKeyup"
           @onfocus="OnFocus"
           @onblur="OnBlurTriggered"
           @onkeypress:preventDefault
           placeholder="@Placeholder"
           autocomplete="off"
           class="form-control"/>

    @if (IsShowingSuggestions)
    {
        <ClickOutside OnClickOutside="OnClickOutside">
            <div class="dropdown-menu dropdown-menu-left show dropdown-project">
                @if (!string.IsNullOrEmpty(ResultHeader))
                {
                    <span class="dropdown-header">@ResultHeader</span>
                }
                
                @if (GroupBy != null)
                {
                    var j = 0;
                    foreach (var searchGroup in GroupedResult)
                    {
                        <span class="dropdown-header">
                            @if (GroupingHeaderTemplate != null)
                            {
                                @GroupingHeaderTemplate(searchGroup.Key)
                            }
                            else
                            {
                                @GroupingHeaderExpression(searchGroup.Key)    
                            }
                            
                        </span>
                        var items = searchGroup.ToList();
                        for (int i = 0; i < items.Count; i++)
                        {
                            var item = items[i];
                            <a @key="item"
                               class="dropdown-item d-flex clickable @GetSelectedSuggestionClass(item, j)"
                               @onclick="() => OnItemSelectedCallback(item)">
                                @ResultTemplate(item)
                            </a>
                            j++;
                        }
                    }

                    if (!GroupedResult.Any())
                    {
                        <a class="dropdown-item d-flex">
                            @NotFoundTemplate
                        </a>
                    }
                }
                else
                {
                    for (int i = 0; i < Result.Count(); i++)
                    {
                        var item = Result[i];
                        <a @key="item"
                           class="dropdown-item d-flex clickable @GetSelectedSuggestionClass(item, i)"
                           @onclick="(_ => OnItemSelectedCallback(item))">
                            @ResultTemplate(item)
                        </a>
                    }

                    if (SearchTextInAutoCompleteList(SearchText, Result) == false)
                    {
                        <a class="dropdown-item d-flex">
                            @NotFoundTemplate
                        </a>
                    }
                }
            </div>
        </ClickOutside>
    }
</div>