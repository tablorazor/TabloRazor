@using TabloRazor.Components.Tables.Components;
@using TabloRazor.Components.Tables;
<Table Item="Item" PageSize="10" Hover Responsive ShowCheckboxes MultiSelect DataProvider="customDataProvider"
        @bind="SelectedItems">
     <HeaderTemplate>
         <strong>Items</strong>
     </HeaderTemplate>

     <ChildContent>
         <Column Item="Item" Property="e => e.Name" Title="Customer" Sortable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Name" />
            </EditorTemplate>
        </Column>
    </ChildContent>
</Table>

@code {

    public class Item
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Name { get; set; }
    }
    public List<Item> SelectedItems { get; set; }

    private IDataProvider<Item> customDataProvider = new MyCustomDataSource();

    public class MyCustomDataSource : IDataProvider<Item>
    {
        private List<TableResult<object, Item>> viewResult;

        public MyCustomDataSource()
        {
            viewResult = new List<TableResult<object, Item>> { new(null, new List<Item> { new() { Name = "my" }, new() { Name = "custom" }, new() { Name = "results" } }) };
        }

        public async Task<IEnumerable<TableResult<object, Item>>> GetData(List<IColumn<Item>> columns, ITableState<Item> state, IEnumerable<Item> items, bool resetPage = false, bool addSorting = true, Item moveToItem = null)
        {
            //here you have to implement your own service call  for data and implement correctly sorting, paging ,grouping to get full benefit of this interface and Table implementation.
            return await Task.FromResult(viewResult);
        }
    }
}